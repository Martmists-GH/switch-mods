name: Build Mods

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4.2.2
        with:
          submodules: recursive

      - name: Install packages
        run: |
          sudo apt update
          sudo apt install -y liblz4-dev cmake ninja-build

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Built STL
        id: cache-stl
        uses: actions/cache@v4
        env:
          cache-name: cache-stl
        with:
          path: lib/stl
          key: cache-stl

      - name: Cache Python venv
        id: cache-py-venv
        uses: actions/cache@v4
        env:
          cache-name: cache-py-venv
        with:
          path: .python_env
          key: cache-py-venv

      - name: Set up switch-tools
        run: |
          git clone https://github.com/switchbrew/switch-tools
          cd switch-tools
          ./autogen.sh
          ./configure 
          make -j $(nproc)

      - name: Set up Clang
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 20
          sudo apt install -y clang-20 llvm-20 lld-20
          sudo update-alternatives --install /usr/bin/cc cc $(which clang-20) 100
          sudo update-alternatives --install /usr/bin/clang clang $(which clang-20) 100
          sudo update-alternatives --install /usr/bin/c++ c++ $(which clang++-20) 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ $(which clang++-20) 100
          sudo update-alternatives --install /usr/bin/lld lld $(which lld-20) 100
          sudo update-alternatives --install /usr/bin/llvm-ar llvm-ar $(which llvm-ar-20) 100
          sudo update-alternatives --install /usr/bin/llvm-ranlib llvm-ranlib $(which llvm-ranlib-20) 100

      - name: Build Project
        run: |
          export SWITCHTOOLS=$(pwd)/switch-tools
          cmake -B build -DCMAKE_BUILD_TYPE="MinSizeRel" -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain.cmake
          cmake --build build --target all_modules_zips -j $(nproc)

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            build/zips/*.zip
